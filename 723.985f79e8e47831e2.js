"use strict";(self.webpackChunkjn_website_frontend=self.webpackChunkjn_website_frontend||[]).push([[723],{9723:(ls,le,Vt)=>{Vt.d(le,{Z:()=>he});var at=Vt(3220),Y=Vt(6682);function he(l,de,Jt){let{color:jt=65280,scale:j=1,onInit:Ot,onUpdate:kt}=void 0===Jt?{}:Jt;const Nt=[],ut=new Y.vBJ({color:jt??65280,wireframe:!0}),$=new at.AO,ue=new at.AO,pe=new at.AO,fe=new at._f,_=new Y.xo$(1),G=new Y.DvJ(1,1,1),Ht=new Y._12(10,10,10,10);function St(N,T){let U=Nt[N],C=!1;return function ye(N,T){if(!N)return!1;const{geometry:U}=N;return U instanceof Y.xo$&&T.type===at.bn.types.SPHERE||U instanceof Y.DvJ&&T.type===at.bn.types.BOX||U instanceof Y._12&&T.type===at.bn.types.PLANE||U.id===T.geometryId&&T.type===at.bn.types.CYLINDER||U.id===T.geometryId&&T.type===at.bn.types.CONVEXPOLYHEDRON||U.id===T.geometryId&&T.type===at.bn.types.TRIMESH||U.id===T.geometryId&&T.type===at.bn.types.HEIGHTFIELD}(U,T)||(U&&l.remove(U),Nt[N]=U=function me(N){let T=new Y.Kj0;const{SPHERE:U,BOX:C,PLANE:H,CYLINDER:D,CONVEXPOLYHEDRON:J,TRIMESH:tt,HEIGHTFIELD:Q}=at.bn.types;switch(N.type){case U:T=new Y.Kj0(_,ut);break;case C:T=new Y.Kj0(G,ut);break;case H:T=new Y.Kj0(Ht,ut);break;case D:{const nt=new Y.fHI(N.radiusTop,N.radiusBottom,N.height,N.numSegments);T=new Y.Kj0(nt,ut),N.geometryId=nt.id;break}case J:{const nt=function vt(N){const T=new Y.u9r,U=[];for(let H=0;H<N.vertices.length;H++){const D=N.vertices[H];U.push(D.x,D.y,D.z)}T.setAttribute("position",new Y.a$l(U,3));const C=[];for(let H=0;H<N.faces.length;H++){const D=N.faces[H],J=D[0];for(let tt=1;tt<D.length-1;tt++)C.push(J,D[tt],D[tt+1])}return T.setIndex(C),T.computeBoundingSphere(),T.computeVertexNormals(),T}(N);T=new Y.Kj0(nt,ut),N.geometryId=nt.id;break}case tt:{const nt=function Dt(N){const T=new Y.u9r,U=[],C=$,H=ue,D=pe;for(let J=0;J<N.indices.length/3;J++)N.getTriangleVertices(J,C,H,D),U.push(C.x,C.y,C.z),U.push(H.x,H.y,H.z),U.push(D.x,D.y,D.z);return T.setAttribute("position",new Y.a$l(U,3)),T.computeBoundingSphere(),T.computeVertexNormals(),T}(N);T=new Y.Kj0(nt,ut),N.geometryId=nt.id;break}case Q:{const nt=function Gt(N){const T=new Y.u9r,U=N.elementSize||1,C=N.data.flatMap((D,J)=>D.flatMap((tt,Q)=>[J*U,Q*U,tt])),H=[];for(let D=0;D<N.data.length-1;D++)for(let J=0;J<N.data[D].length-1;J++){const tt=N.data[D].length,Q=D*tt+J;H.push(Q+1,Q+tt,Q+tt+1),H.push(Q+tt,Q+1,Q)}return T.setIndex(H),T.setAttribute("position",new Y.a$l(C,3)),T.computeBoundingSphere(),T.computeVertexNormals(),T}(N);T=new Y.Kj0(nt,ut),N.geometryId=nt.id;break}}return l.add(T),T}(T),C=!0),function ve(N,T){const{SPHERE:U,BOX:C,PLANE:H,CYLINDER:D,CONVEXPOLYHEDRON:J,TRIMESH:tt,HEIGHTFIELD:Q}=at.bn.types;switch(T.type){case U:{const{radius:nt}=T;N.scale.set(nt*j,nt*j,nt*j);break}case C:N.scale.copy(T.halfExtents),N.scale.multiplyScalar(2*j);break;case H:break;case D:case J:N.scale.set(1*j,1*j,1*j);break;case tt:N.scale.copy(T.scale).multiplyScalar(j);break;case Q:N.scale.set(1*j,1*j,1*j)}}(U,T),C}return Ht.translate(0,0,1e-4),{update:function pt(){const N=Nt,T=$,U=fe;let C=0;for(const H of de.bodies)for(let D=0;D!==H.shapes.length;D++){const J=H.shapes[D],tt=St(C,J),Q=N[C];Q&&(H.quaternion.vmult(H.shapeOffsets[D],T),H.position.vadd(T,T),H.quaternion.mult(H.shapeOrientations[D],U),Q.position.copy(T),Q.quaternion.copy(U),tt&&Ot instanceof Function&&Ot(H,Q,J),!tt&&kt instanceof Function&&kt(H,Q,J)),C++}for(let H=C;H<N.length;H++){const D=N[H];D&&l.remove(D)}N.length=C}}}},3220:(ls,le,Vt)=>{Vt.d(le,{AO:()=>l,F5:()=>He,JO:()=>Jn,_f:()=>$,aL:()=>Ye,bn:()=>_,kp:()=>ke,q3:()=>Oo,uT:()=>C,xu:()=>St});class Y{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new Y);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],a=s[3],h=s[4],u=s[5],d=s[6],f=s[7],p=s[8],m=n[0],v=n[1],w=n[2],y=n[3],x=n[4],b=n[5],E=n[6],z=n[7],F=n[8];return i[0]=o*m+r*y+c*E,i[1]=o*v+r*x+c*z,i[2]=o*w+r*b+c*F,i[3]=a*m+h*y+u*E,i[4]=a*v+h*x+u*z,i[5]=a*w+h*b+u*F,i[6]=d*m+f*y+p*E,i[7]=d*v+f*x+p*z,i[8]=d*w+f*b+p*F,e}scale(t,e){void 0===e&&(e=new Y);const s=this.elements,n=e.elements;for(let i=0;3!==i;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){void 0===e&&(e=new l);const i=[];let o,r;for(o=0;o<12;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+4*r]=this.elements[o+3*r];i[3]=t.x,i[7]=t.y,i[11]=t.z;let c=3;const a=c;let h,d;do{if(o=a-c,0===i[o+4*o])for(r=o+1;r<a;r++)if(0!==i[o+4*r]){h=4;do{d=4-h,i[d+4*o]+=i[d+4*r]}while(--h);break}if(0!==i[o+4*o])for(r=o+1;r<a;r++){const f=i[o+4*r]/i[o+4*o];h=4;do{d=4-h,i[d+4*r]=d<=o?0:i[d+4*r]-i[d+4*o]*f}while(--h)}}while(--c);if(e.z=i[11]/i[10],e.y=(i[7]-i[6]*e.z)/i[5],e.x=(i[3]-i[2]*e.z-i[1]*e.y)/i[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let s=0;s<9;s++)t+=this.elements[s]+",";return t}reverse(t){void 0===t&&(t=new Y);const n=he;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+6*o]=this.elements[i+3*o];n[3]=1,n[9]=0,n[15]=0,n[4]=0,n[10]=1,n[16]=0,n[5]=0,n[11]=0,n[17]=1;let r=3;const c=r;let a,u;do{if(i=c-r,0===n[i+6*i])for(o=i+1;o<c;o++)if(0!==n[i+6*o]){a=6;do{u=6-a,n[u+6*i]+=n[u+6*o]}while(--a);break}if(0!==n[i+6*i])for(o=i+1;o<c;o++){const d=n[i+6*o]/n[i+6*i];a=6;do{u=6-a,n[u+6*o]=u<=i?0:n[u+6*o]-n[u+6*i]*d}while(--a)}}while(--r);i=2;do{o=i-1;do{const d=n[i+6*o]/n[i+6*i];a=6;do{u=6-a,n[u+6*o]=n[u+6*o]-n[u+6*i]*d}while(--a)}while(o--)}while(--i);i=2;do{const d=1/n[i+6*i];a=6;do{u=6-a,n[u+6*i]=n[u+6*i]*d}while(--a)}while(i--);i=2;do{o=2;do{if(u=n[3+o+6*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,a=e*o,h=e*r,u=e*c,d=s*r,f=s*c,p=n*c,m=i*o,v=i*r,w=i*c,y=this.elements;return y[0]=1-(d+p),y[1]=h-w,y[2]=u+v,y[3]=h+w,y[4]=1-(a+p),y[5]=f-m,y[6]=u-v,y[7]=f+m,y[8]=1-(a+d),this}transpose(t){void 0===t&&(t=new Y);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const he=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){void 0===e&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new l(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new l(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new Y([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){void 0===t&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){void 0===e&&(e=new l);const n=this.y,i=this.z;return e.x=t*this.x,e.y=t*n,e.z=t*i,e}vmul(t,e){return void 0===e&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=de,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Jt;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(jt),jt.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0),l.UNIT_X=new l(1,0,0),l.UNIT_Y=new l(0,1,0),l.UNIT_Z=new l(0,0,1);const de=new l,Jt=new l,jt=new l;class j{constructor(t){void 0===t&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let a=t[c];r&&(r.vmult(a,Ot),a=Ot),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new j).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return(n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x)&&(n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y)&&(n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z)}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const a=this.lowerBound,h=this.upperBound;t.copy(a),e.set(h.x,a.y,a.z),s.set(h.x,h.y,a.z),n.set(a.x,h.y,h.z),i.set(h.x,a.y,h.z),o.set(a.x,h.y,a.z),r.set(a.x,a.y,h.z),c.copy(h)}toLocalFrame(t,e){const s=kt;this.getCorners(s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7]);for(let d=0;8!==d;d++){const f=s[d];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=kt;this.getCorners(s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7]);for(let d=0;8!==d;d++){const f=s[d];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,h=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,d=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(a,h)),Math.min(u,d)),p=Math.min(Math.min(Math.max(r,c),Math.max(a,h)),Math.max(u,d));return!(p<0||f>p)}}const Ot=new l,kt=[new l,new l,new l,new l,new l,new l,new l,new l];class Nt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class ut{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){return void 0!==this._listeners&&void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const n=s[t].indexOf(e);return-1!==n&&s[t].splice(n,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const s=this._listeners[t.type];if(void 0!==s){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class ${constructor(t,e,s,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),void 0===n&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ue;t.tangents(s,pe),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new $);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,a=t.z,h=t.w;return e.x=s*h+o*r+n*a-i*c,e.y=n*h+o*c+i*r-s*a,e.z=i*h+o*a+s*c-n*r,e.w=o*h-s*r-n*c-i*a,e}inverse(t){void 0===t&&(t=new $);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new $),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,a=this.w,h=a*s+r*i-c*n,u=a*n+c*s-o*i,d=a*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=h*a+f*-o+u*-c-d*-r,e.y=u*a+f*-r+d*-o-h*-c,e.z=d*a+f*-c+h*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let s,n,i;void 0===e&&(e="YZX");const o=this.x,r=this.y,c=this.z,a=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const h=o*r+c*a;if(h>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),h<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),void 0===s){const u=o*o,f=c*c;s=Math.atan2(2*r*a-2*o*c,1-r*r*2-2*f),n=Math.asin(2*h),i=Math.atan2(2*o*a-2*r*c,1-2*u-2*f)}}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){void 0===n&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),a=Math.sin(e/2),h=Math.sin(s/2);return"XYZ"===n?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):"YXZ"===n?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):"ZXY"===n?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):"ZYX"===n?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):"YZX"===n?(this.x=c*o*r+i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r-c*a*h):"XZY"===n&&(this.x=c*o*r-i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r+c*a*h),this}clone(){return new $(this.x,this.y,this.z,this.w)}slerp(t,e,s){void 0===s&&(s=new $);const n=this.x,i=this.y,o=this.z,r=this.w;let d,f,p,m,v,c=t.x,a=t.y,h=t.z,u=t.w;return f=n*c+i*a+o*h+r*u,f<0&&(f=-f,c=-c,a=-a,h=-h,u=-u),1-f>1e-6?(d=Math.acos(f),p=Math.sin(d),m=Math.sin((1-e)*d)/p,v=Math.sin(e*d)/p):(m=1-e,v=e),s.x=m*n+v*c,s.y=m*i+v*a,s.z=m*o+v*h,s.w=m*r+v*u,s}integrate(t,e,s,n){void 0===n&&(n=new $);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,a=this.y,h=this.z,u=this.w,d=.5*e;return n.x+=d*(i*u+o*h-r*a),n.y+=d*(o*u+r*c-i*h),n.z+=d*(r*u+i*a-o*c),n.w+=d*(-i*c-o*a-r*h),n}}const ue=new l,pe=new l,fe={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};let _=(()=>{class g{constructor(e){void 0===e&&(e={}),this.id=g.idCounter++,this.type=e.type||0,this.boundingSphereRadius=0,this.collisionResponse=!e.collisionResponse||e.collisionResponse,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:1,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.material=e.material?e.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(e,s){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(e,s,n,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}return g.idCounter=0,g.types=fe,g})();class G{constructor(t){void 0===t&&(t={}),this.position=new l,this.quaternion=new $,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return G.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return G.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return void 0===n&&(n=new l),s.vsub(t,n),e.conjugate(Ht),Ht.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return void 0===n&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return void 0===n&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const Ht=new $;class vt extends _{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:_.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){e[o[c]].vsub(e[o[(c+1)%r]],n),n.normalize();let h=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){h=!0;break}h||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;if(this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e,e.dot(this.vertices[this.faces[t][0]])<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t];vt.computeNormal(this.vertices[s[0]],this.vertices[s[1]],this.vertices[s[2]],e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,a){const h=new l;let u=-1,d=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){h.copy(s.faceNormals[p]),i.vmult(h,h);const m=h.dot(o);m>d&&(d=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],v=new l;v.copy(m),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,a)}findSeparatingAxis(t,e,s,n,i,o,r,c){const a=new l,h=new l,u=new l,d=new l,f=new l,p=new l;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],a);const y=v.testSepAxis(a,t,e,s,n,i);if(!1===y)return!1;y<m&&(m=y,o.copy(a))}else{const w=r?r.length:v.faces.length;for(let y=0;y<w;y++){a.copy(v.faceNormals[r?r[y]:y]),s.vmult(a,a);const b=v.testSepAxis(a,t,e,s,n,i);if(!1===b)return!1;b<m&&(m=b,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],h);const y=v.testSepAxis(h,t,e,s,n,i);if(!1===y)return!1;y<m&&(m=y,o.copy(h))}else{const w=c?c.length:t.faces.length;for(let y=0;y<w;y++){h.copy(t.faceNormals[c?c[y]:y]),i.vmult(h,h);const b=v.testSepAxis(h,t,e,s,n,i);if(!1===b)return!1;b<m&&(m=b,o.copy(h))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],d);for(let y=0;y!==t.uniqueEdges.length;y++)if(i.vmult(t.uniqueEdges[y],f),d.cross(f,p),!p.almostZero()){p.normalize();const x=v.testSepAxis(p,t,e,s,n,i);if(!1===x)return!1;x<m&&(m=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){vt.project(this,t,s,n,Dt),vt.project(e,t,i,o,Gt);const c=Dt[0],a=Dt[1],h=Gt[0],u=Gt[1];if(c<u||h<a)return!1;const d=c-u,f=h-a;return d<f?d:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){return-this.faceNormals[t].dot(this.vertices[this.faces[t][0]])}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new l,a=new l,h=new l,u=new l,d=new l,f=new l,p=new l,m=new l,v=this,y=n,x=[];let b=-1,E=Number.MAX_VALUE;for(let R=0;R<v.faces.length;R++){c.copy(v.faceNormals[R]),s.vmult(c,c);const L=c.dot(t);L<E&&(E=L,b=R)}if(b<0)return;const z=v.faces[b];z.connectedFaces=[];for(let R=0;R<v.faces.length;R++)for(let L=0;L<v.faces[R].length;L++)-1!==z.indexOf(v.faces[R][L])&&R!==b&&-1===z.connectedFaces.indexOf(R)&&z.connectedFaces.push(R);const F=z.length;for(let R=0;R<F;R++){const L=v.vertices[z[R]];L.vsub(v.vertices[z[(R+1)%F]],a),h.copy(a),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[b]),s.vmult(u,u),e.vadd(u,u),h.cross(u,d),d.negate(d),f.copy(L),s.vmult(f,f),e.vadd(f,f);const A=z.connectedFaces[R];p.copy(this.faceNormals[A]);const I=this.getPlaneConstantOfFace(A);m.copy(p),s.vmult(m,m);const S=I-m.dot(e);for(this.clipFaceAgainstPlane(y,x,m,S);y.length;)y.shift();for(;x.length;)y.push(x.shift())}p.copy(this.faceNormals[b]);const P=this.getPlaneConstantOfFace(b);m.copy(p),s.vmult(m,m);const W=P-m.dot(e);for(let R=0;R<y.length;R++){let L=m.dot(y[R])+W;L<=i&&(console.log(`clamped: depth=${L} to minDist=${i}`),L=i),L<=o&&L<=1e-6&&r.push({point:y[R],normal:m,depth:L})}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],a=t[0];i=s.dot(c)+n;for(let h=0;h<r;h++){if(a=t[h],o=s.dot(a)+n,i<0)if(o<0){const u=new l;u.copy(a),e.push(u)}else{const u=new l;c.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new l;c.lerp(a,i/(i-o),u),e.push(u),e.push(a)}c=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,a,h,u,d=new l;for(let f=0;f<i.length;f++)d.copy(i[f]),e.vmult(d,d),t.vadd(d,d),(void 0===o||d.x<o)&&(o=d.x),(void 0===a||d.x>a)&&(a=d.x),(void 0===r||d.y<r)&&(r=d.y),(void 0===h||d.y>h)&&(h=d.y),(void 0===c||d.z<c)&&(c=d.z),(void 0===u||d.z>u)&&(u=d.z);s.set(o,r,c),n.set(a,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,o=new l;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const a=e[s[r][0]],h=new l;t.vsub(a,h);const u=c.dot(h),d=new l;o.vsub(a,d);const f=c.dot(d);if(u<0&&f>0||u>0&&f<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=ve;let c=0,a=0;const h=ye,u=t.vertices;h.setZero(),G.vectorToLocalFrame(s,n,e,r),G.pointToLocalFrame(s,n,h,h);const d=h.dot(r);a=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<a&&(a=p)}if(a-=d,c-=d,a>c){const f=a;a=c,c=f}i[0]=c,i[1]=a}}const Dt=[],Gt=[],ve=(new l,new l),ye=new l;class St extends _{constructor(t){super({type:_.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new vt({vertices:i,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new l),St.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),void 0!==e)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)pt.set(i[o][0],i[o][1],i[o][2]),e.vmult(pt,pt),t.vadd(pt,pt),s(pt.x,pt.y,pt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;N[0].set(i.x,i.y,i.z),N[1].set(-i.x,i.y,i.z),N[2].set(-i.x,-i.y,i.z),N[3].set(-i.x,-i.y,-i.z),N[4].set(i.x,-i.y,-i.z),N[5].set(i.x,i.y,-i.z),N[6].set(-i.x,i.y,-i.z),N[7].set(i.x,-i.y,i.z);const o=N[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=N[r];e.vmult(c,c),t.vadd(c,c);const a=c.x,h=c.y,u=c.z;a>n.x&&(n.x=a),h>n.y&&(n.y=h),u>n.z&&(n.z=u),a<s.x&&(s.x=a),h<s.y&&(s.y=h),u<s.z&&(s.z=u)}}}const pt=new l,N=[new l,new l,new l,new l,new l,new l,new l,new l];class C extends ut{constructor(t){void 0===t&&(t={}),super(),this.id=C.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?C.STATIC:C.DYNAMIC,typeof t.type==typeof C.STATIC&&(this.type=t.type),this.allowSleep=!(typeof t.allowSleep<"u")||t.allowSleep,this.sleepState=C.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new $,this.initQuaternion=new $,this.previousQuaternion=new $,this.interpolatedQuaternion=new $,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new Y,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new Y,this.fixedRotation=typeof t.fixedRotation<"u"&&t.fixedRotation,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new j,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=C.AWAKE,this.wakeUpAfterNarrowphase=!1,t===C.SLEEPING&&this.dispatchEvent(C.wakeupEvent)}sleep(){this.sleepState=C.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===C.AWAKE&&s<n?(this.sleepState=C.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(C.sleepyEvent)):e===C.SLEEPY&&s>n?this.wakeUp():e===C.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(C.sleepEvent))}}updateSolveMassProperties(){this.sleepState===C.SLEEPING||this.type===C.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new $;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=H,o=D,r=this.quaternion,c=this.aabb,a=J;for(let h=0;h!==n;h++){const u=t[h];r.vmult(e[h],i),i.vadd(this.position,i),r.mult(s[h],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),0===h?c.copy(a):c.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const s=tt,n=Q;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(void 0===e&&(e=new l),this.type!==C.DYNAMIC)return;this.sleepState===C.SLEEPING&&this.wakeUp();const s=hs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new l),this.type!==C.DYNAMIC)return;const s=ds,n=us;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===C.DYNAMIC&&(this.sleepState===C.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new l),this.type!==C.DYNAMIC)return;this.sleepState===C.SLEEPING&&this.wakeUp();const s=e,n=ps;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=fs;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new l),this.type!==C.DYNAMIC)return;const s=ms,n=vs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=ys;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),St.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==C.DYNAMIC&&this.type!==C.KINEMATIC||this.sleepState===C.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,a=this.quaternion,u=this.invInertiaWorld,d=this.linearFactor,f=this.invMass*t;n.x+=r.x*f*d.x,n.y+=r.y*f*d.y,n.z+=r.z*f*d.z;const p=u.elements,m=this.angularFactor,v=c.x*m.x,w=c.y*m.y,y=c.z*m.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*y),i.y+=t*(p[3]*v+p[4]*w+p[5]*y),i.z+=t*(p[6]*v+p[7]*w+p[8]*y),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}C.idCounter=0,C.COLLIDE_EVENT_NAME="collide",C.DYNAMIC=1,C.STATIC=2,C.KINEMATIC=4,C.AWAKE=0,C.SLEEPY=1,C.SLEEPING=2,C.wakeupEvent={type:"wakeup"},C.sleepyEvent={type:"sleepy"},C.sleepEvent={type:"sleep"};const H=new l,D=new $,J=new j,tt=new Y,Q=new Y,hs=(new Y,new l),ds=new l,us=new l,ps=new l,fs=new l,ms=new l,vs=new l,ys=new l;class ws{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&C.STATIC||t.sleepState===C.SLEEPING)&&(e.type&C.STATIC||e.sleepState===C.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=xs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=gs,n=bs,i=As,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,a=i[r].id,h=c<a?`${c},${a}`:`${a},${c}`;s[h]=r,s.keys.push(h)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),a=s[c];t.push(n[a]),e.push(i[a]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;return t.position.vsub(e.position,s),Math.pow(t.shapes[0].boundingSphereRadius+e.shapes[0].boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const xs=new l;new l,new $,new l;const gs={keys:[]},bs=[],As=[];new l,new l,new l;class Bs extends ws{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let a=0;a!==c;a++)o=n[c],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){void 0===s&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Ut{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let Ce,ze,Se,Ie,_e,Fe,Me;Ce=_.types.SPHERE,ze=_.types.PLANE,Se=_.types.BOX,Ie=_.types.CYLINDER,_e=_.types.CONVEXPOLYHEDRON,Fe=_.types.HEIGHTFIELD,Me=_.types.TRIMESH;class et{get[Ce](){return this._intersectSphere}get[ze](){return this._intersectPlane}get[Se](){return this._intersectBox}get[Ie](){return this._intersectConvex}get[_e](){return this._intersectConvex}get[Fe](){return this._intersectHeightfield}get[Me](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new l),void 0===e&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=et.ANY,this.result=new Ut,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||et.ANY,this.result=e.result||new Ut,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=!(typeof e.checkCollisionResponse<"u")||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Ne),xe.length=0,t.broadphase.aabbQuery(t,Ne,xe),this.intersectBodies(xe),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=Cs,i=zs;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if((!s||c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){if(function ks(g,t,e){e.vsub(g,It);const s=It.dot(t);return t.scale(s,ee),ee.vadd(g,ee),e.distanceTo(ee)}(this.from,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,a=new l(0,0,1);e.vmult(a,a);const h=new l;o.vsub(s,h);const u=h.dot(a);if(r.vsub(s,h),u*h.dot(a)>0||o.distanceTo(r)<u)return;const f=a.dot(c);if(Math.abs(f)<this.precision)return;const p=new l,m=new l,v=new l;o.vsub(s,p);const w=-a.dot(p)/f;c.scale(w,m),o.vadd(m,v),this.reportIntersection(a,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){const o=Ss;o.from.copy(this.from),o.to.copy(this.to),G.pointToLocalFrame(s,e,o.from,o.from),G.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Is;let c,a,h,u;c=a=0,h=u=t.data.length-1;const d=new j;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),c=Math.max(c,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<h;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),G.pointToWorldFrame(s,e,t.pillarOffset,te),this._intersectConvex(t.pillarConvex,e,te,n,i,Te),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),G.pointToWorldFrame(s,e,t.pillarOffset,te),this._intersectConvex(t.pillarConvex,e,te,n,i,Te)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),d=h**2-4*a*((o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-t.radius**2),f=_s,p=Fs;if(!(d<0))if(0===d)o.lerp(r,d,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-h-Math.sqrt(d))/(2*a),v=(-h+Math.sqrt(d))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=Ms,c=Pe,a=o&&o.faceList||null,h=t.faces,u=t.vertices,d=t.faceNormals,f=this.direction,p=this.from,v=p.distanceTo(this.to),w=a?a.length:h.length,y=this.result;for(let x=0;!y.shouldStop&&x<w;x++){const b=a?a[x]:x,E=h[b],z=d[b],F=e,P=s;c.copy(u[E[0]]),F.vmult(c,c),c.vadd(P,c),c.vsub(p,c),F.vmult(z,r);const W=f.dot(r);if(Math.abs(W)<this.precision)continue;const R=r.dot(c)/W;if(!(R<0)){f.scale(R,lt),lt.vadd(p,lt),dt.copy(u[E[0]]),F.vmult(dt,dt),P.vadd(dt,dt);for(let L=1;!y.shouldStop&&L<E.length-1;L++){ft.copy(u[E[L]]),mt.copy(u[E[L+1]]),F.vmult(ft,ft),F.vmult(mt,mt),P.vadd(ft,ft),P.vadd(mt,mt);const k=lt.distanceTo(p);!et.pointInTriangle(lt,dt,ft,mt)&&!et.pointInTriangle(lt,ft,dt,mt)||k>v||this.reportIntersection(r,lt,i,n,b)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Ps,c=js,a=Os,h=Pe,u=Rs,d=qs,f=Ls,p=Vs,m=Ws,v=t.indices,w=this.from,y=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),G.vectorToLocalFrame(s,e,x,u),G.pointToLocalFrame(s,e,w,d),G.pointToLocalFrame(s,e,y,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,f.vsub(d,u),u.normalize();const b=d.distanceSquared(f);t.tree.rayQuery(this,a,c);for(let E=0,z=c.length;!this.result.shouldStop&&E!==z;E++){const F=c[E];t.getNormal(F,r),t.getVertex(v[3*F],dt),dt.vsub(d,h);const P=u.dot(r),W=r.dot(h)/P;if(W<0)continue;u.scale(W,lt),lt.vadd(d,lt),t.getVertex(v[3*F+1],ft),t.getVertex(v[3*F+2],mt);const R=lt.distanceSquared(d);!et.pointInTriangle(lt,ft,dt,mt)&&!et.pointInTriangle(lt,dt,ft,mt)||R>b||(G.vectorToWorldFrame(e,r,m),G.pointToWorldFrame(s,e,lt,p),this.reportIntersection(m,p,i,n,F))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case et.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,c),a.hasHit=!0,this.callback(a);break;case et.CLOSEST:(c<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c));break;case et.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c),a.shouldStop=!0}}static pointInTriangle(t,e,s,n){n.vsub(e,It),s.vsub(e,Yt),t.vsub(e,ge);const i=It.dot(It),o=It.dot(Yt),r=It.dot(ge),c=Yt.dot(Yt),a=Yt.dot(ge);let h,u;return(h=c*r-o*a)>=0&&(u=i*a-o*r)>=0&&h+u<i*c-o*o}}et.CLOSEST=1,et.ANY=2,et.ALL=4;const Ne=new j,xe=[],Yt=new l,ge=new l,Cs=new l,zs=new $,lt=new l,dt=new l,ft=new l,mt=new l;new l,new Ut;const Te={faceList:[0]},te=new l,Ss=new et,Is=[],_s=new l,Fs=new l,Ms=new l,Pe=(new l,new l,new l),Ps=new l,Rs=new l,qs=new l,Ls=new l,Ws=new l,Vs=new l;new j;const js=[],Os=new G,It=new l,ee=new l;class be{static defaults(t,e){void 0===t&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Re{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}let qe=(()=>{class g{constructor(e,s,n,i){void 0===n&&(n=-1e6),void 0===i&&(i=1e6),this.id=g.idCounter++,this.minForce=n,this.maxForce=i,this.bi=e,this.bj=s,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Re,this.jacobianElementB=new Re,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(e,s,n){const i=s,o=e,r=n;this.a=4/(r*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(r*r*o*(1+4*i))}computeB(e,s,n){const i=this.computeGW();return-this.computeGq()*e-i*s-this.computeGiMf()*n}computeGq(){const s=this.jacobianElementB,r=this.bj.position;return this.jacobianElementA.spatial.dot(this.bi.position)+s.spatial.dot(r)}computeGW(){const s=this.jacobianElementB,n=this.bi,i=this.bj,r=i.velocity,a=i.angularVelocity;return this.jacobianElementA.multiplyVectors(n.velocity,n.angularVelocity)+s.multiplyVectors(r,a)}computeGWlambda(){const s=this.jacobianElementB,n=this.bi,i=this.bj,r=i.vlambda,a=i.wlambda;return this.jacobianElementA.multiplyVectors(n.vlambda,n.wlambda)+s.multiplyVectors(r,a)}computeGiMf(){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,r=n.torque,c=i.force,a=i.torque,u=i.invMassSolve;return n.force.scale(n.invMassSolve,Le),c.scale(u,We),n.invInertiaWorldSolve.vmult(r,Ve),i.invInertiaWorldSolve.vmult(a,je),e.multiplyVectors(Le,Ve)+s.multiplyVectors(We,je)}computeGiMGt(){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,a=i.invInertiaWorldSolve;let h=n.invMassSolve+i.invMassSolve;return n.invInertiaWorldSolve.vmult(e.rotational,se),h+=se.dot(e.rotational),a.vmult(s.rotational,se),h+=se.dot(s.rotational),h}addToWlambda(e){const s=this.jacobianElementA,n=this.jacobianElementB,i=this.bi,o=this.bj,r=Hs;i.vlambda.addScaledVector(i.invMassSolve*e,s.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*e,n.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(s.rotational,r),i.wlambda.addScaledVector(e,r,i.wlambda),o.invInertiaWorldSolve.vmult(n.rotational,r),o.wlambda.addScaledVector(e,r,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}return g.idCounter=0,g})();const Le=new l,We=new l,Ve=new l,je=new l,se=new l,Hs=new l;class $t extends qe{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=Ds,a=Gs,h=n.velocity,u=n.angularVelocity,d=i.velocity,f=i.angularVelocity,p=Us,m=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,a),w.negate(m.spatial),c.negate(m.rotational),v.spatial.copy(w),v.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const y=w.dot(p),x=this.restitution+1;return-y*e-(x*d.dot(w)-x*h.dot(w)+f.dot(a)-u.dot(c))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Ys,e=Xs,s=$s,n=Ks,i=Zs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Ds=new l,Gs=new l,Us=new l,Ys=new l,Xs=new l,$s=new l,Ks=new l,Zs=new l;new l,new l,new l,new l,new l,new l,new l,new l,new l,new l;class Oe extends qe{constructor(t,e,s){super(t,e,-s,s),this.ri=new l,this.rj=new l,this.t=new l}computeB(t){const e=this.b,n=this.rj,i=hn,o=dn,r=this.t;this.ri.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,a=this.jacobianElementB;return r.negate(c.spatial),i.negate(c.rotational),a.spatial.copy(r),a.rotational.copy(o),-this.computeGW()*e-t*this.computeGiMf()}}const hn=new l,dn=new l;let ke=(()=>{class g{constructor(e,s,n){n=be.defaults(n,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=g.idCounter++,this.materials=[e,s],this.friction=n.friction,this.restitution=n.restitution,this.contactEquationStiffness=n.contactEquationStiffness,this.contactEquationRelaxation=n.contactEquationRelaxation,this.frictionEquationStiffness=n.frictionEquationStiffness,this.frictionEquationRelaxation=n.frictionEquationRelaxation}}return g.idCounter=0,g})(),He=(()=>{class g{constructor(e){void 0===e&&(e={});let s="";"string"==typeof e&&(s=e,e={}),this.name=s,this.id=g.idCounter++,this.friction=typeof e.friction<"u"?e.friction:-1,this.restitution=typeof e.restitution<"u"?e.restitution:-1}}return g.idCounter=0,g})();new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new et,new l,new l,new l,new l(1,0,0),new l(0,1,0),new l(0,0,1),new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l;class Ye extends _{constructor(t){if(super({type:_.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new l);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new l,new l,new l,new l,new l,new l,new l,new l,new l;class Jn extends _{constructor(){super({type:_.types.PLANE}),this.worldNormal=new l,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return void 0===e&&(e=new l),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){yt.set(0,0,1),e.vmult(yt,yt);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),1===yt.x?n.x=t.x:-1===yt.x&&(s.x=t.x),1===yt.y?n.y=t.y:-1===yt.y&&(s.y=t.y),1===yt.z?n.z=t.z:-1===yt.z&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const yt=new l;new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new j,new l,new j,new l,new l,new l,new l,new l,new l,new l,new j,new l,new G,new j;class vi{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class yi extends vi{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,a=c.length,h=t;let u,d,f,p,m,v;if(0!==r)for(let b=0;b!==a;b++)c[b].updateSolveMassProperties();const w=xi,y=gi,x=wi;w.length=r,y.length=r,x.length=r;for(let b=0;b!==r;b++){const E=o[b];x[b]=0,y[b]=E.computeB(h),w[b]=1/E.computeC()}if(0!==r){for(let z=0;z!==a;z++){const F=c[z],W=F.wlambda;F.vlambda.set(0,0,0),W.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let z=0;z!==r;z++){const F=o[z];u=y[z],d=w[z],v=x[z],m=F.computeGWlambda(),f=d*(u-m-F.eps*v),v+f<F.minForce?f=F.minForce-v:v+f>F.maxForce&&(f=F.maxForce-v),x[z]+=f,p+=f>0?f:-f,F.addToWlambda(f)}if(p*p<i)break}for(let z=0;z!==a;z++){const F=c[z],P=F.velocity,W=F.angularVelocity;F.vlambda.vmul(F.linearFactor,F.vlambda),P.vadd(F.vlambda,P),F.wlambda.vmul(F.angularFactor,F.wlambda),W.vadd(F.wlambda,W)}let b=o.length;const E=1/h;for(;b--;)o[b].multiplier=x[b]*E}return s}}const wi=[],xi=[],gi=[];class Ii{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class _i extends Ii{constructor(){super(...arguments),this.type=l}constructObject(){return new l}}const K_sphereSphere=_.types.SPHERE,K_spherePlane=_.types.SPHERE|_.types.PLANE,K_boxBox=_.types.BOX|_.types.BOX,K_sphereBox=_.types.SPHERE|_.types.BOX,K_planeBox=_.types.PLANE|_.types.BOX,K_convexConvex=_.types.CONVEXPOLYHEDRON,K_sphereConvex=_.types.SPHERE|_.types.CONVEXPOLYHEDRON,K_planeConvex=_.types.PLANE|_.types.CONVEXPOLYHEDRON,K_boxConvex=_.types.BOX|_.types.CONVEXPOLYHEDRON,K_sphereHeightfield=_.types.SPHERE|_.types.HEIGHTFIELD,K_boxHeightfield=_.types.BOX|_.types.HEIGHTFIELD,K_convexHeightfield=_.types.CONVEXPOLYHEDRON|_.types.HEIGHTFIELD,K_sphereParticle=_.types.PARTICLE|_.types.SPHERE,K_planeParticle=_.types.PLANE|_.types.PARTICLE,K_boxParticle=_.types.BOX|_.types.PARTICLE,K_convexParticle=_.types.PARTICLE|_.types.CONVEXPOLYHEDRON,K_cylinderCylinder=_.types.CYLINDER,K_sphereCylinder=_.types.SPHERE|_.types.CYLINDER,K_planeCylinder=_.types.PLANE|_.types.CYLINDER,K_boxCylinder=_.types.BOX|_.types.CYLINDER,K_convexCylinder=_.types.CONVEXPOLYHEDRON|_.types.CYLINDER,K_heightfieldCylinder=_.types.HEIGHTFIELD|_.types.CYLINDER,K_particleCylinder=_.types.PARTICLE|_.types.CYLINDER,K_sphereTrimesh=_.types.SPHERE|_.types.TRIMESH,K_planeTrimesh=_.types.PLANE|_.types.TRIMESH;class Fi{get[K_sphereSphere](){return this.sphereSphere}get[K_spherePlane](){return this.spherePlane}get[K_boxBox](){return this.boxBox}get[K_sphereBox](){return this.sphereBox}get[K_planeBox](){return this.planeBox}get[K_convexConvex](){return this.convexConvex}get[K_sphereConvex](){return this.sphereConvex}get[K_planeConvex](){return this.planeConvex}get[K_boxConvex](){return this.boxConvex}get[K_sphereHeightfield](){return this.sphereHeightfield}get[K_boxHeightfield](){return this.boxHeightfield}get[K_convexHeightfield](){return this.convexHeightfield}get[K_sphereParticle](){return this.sphereParticle}get[K_planeParticle](){return this.planeParticle}get[K_boxParticle](){return this.boxParticle}get[K_convexParticle](){return this.convexParticle}get[K_cylinderCylinder](){return this.convexConvex}get[K_sphereCylinder](){return this.sphereConvex}get[K_planeCylinder](){return this.planeConvex}get[K_boxCylinder](){return this.boxConvex}get[K_convexCylinder](){return this.convexConvex}get[K_heightfieldCylinder](){return this.heightfieldCylinder}get[K_particleCylinder](){return this.particleCylinder}get[K_sphereTrimesh](){return this.sphereTrimesh}get[K_planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new _i,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new $t(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,h=n.material||e.material;return a&&h&&a.restitution>=0&&h.restitution>=0&&(r.restitution=a.restitution*h.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,r=this.world,c=this.currentContactMaterial;let a=c.friction;const h=t.si.material||s.material,u=t.sj.material||n.material;if(h&&u&&h.friction>=0&&u.friction>=0&&(a=h.friction*u.friction),a>0){const d=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new Oe(s,n,d*f),v=p.length?p.pop():new Oe(s,n,d*f);return m.bi=v.bi=s,m.bj=v.bj=n,m.minForce=v.minForce=-d*f,m.maxForce=v.maxForce=d*f,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];Mt.setZero(),Pt.setZero(),Rt.setZero();const i=e.bi;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(Mt.vadd(e.ni,Mt),Pt.vadd(e.ri,Pt),Rt.vadd(e.rj,Rt)):(Mt.vsub(e.ni,Mt),Pt.vadd(e.rj,Pt),Rt.vadd(e.ri,Rt));const o=1/t;Pt.scale(o,s.ri),Rt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),Mt.normalize(),Mt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=Ti,a=Pi,h=Mi,u=Ni;for(let d=0,f=t.length;d!==f;d++){const p=t[d],m=e[d];let v=null;p.material&&m.material&&(v=s.getContactMaterial(p.material,m.material)||null);const w=p.type&C.KINEMATIC&&m.type&C.STATIC||p.type&C.STATIC&&m.type&C.KINEMATIC||p.type&C.KINEMATIC&&m.type&C.KINEMATIC;for(let y=0;y<p.shapes.length;y++){p.quaternion.mult(p.shapeOrientations[y],c),p.quaternion.vmult(p.shapeOffsets[y],h),h.vadd(p.position,h);const x=p.shapes[y];for(let b=0;b<m.shapes.length;b++){m.quaternion.mult(m.shapeOrientations[b],a),m.quaternion.vmult(m.shapeOffsets[b],u),u.vadd(m.position,u);const E=m.shapes[b];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||h.distanceTo(u)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let z=null;x.material&&E.material&&(z=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=z||v||s.defaultContactMaterial;const P=this[x.type|E.type];if(P){let W=!1;W=x.type<E.type?P.call(this,x,E,h,u,c,a,p,m,x,E,w):P.call(this,E,x,u,h,a,c,m,p,x,E,w),W&&w&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,a,h,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,c,t,e,a,h);n.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(n,d.rj),d.rj.vsub(c.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,a,h,u){const d=this.createContactEquation(r,c,t,e,a,h);if(d.ni.set(0,0,1),o.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(n,ce),d.ni.scale(d.ni.dot(ce),ns),ce.vsub(ns,d.rj),-ce.dot(d.ni)<=t.radius){if(u)return!0;const f=d.ri,p=d.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool,f=ro;s.vsub(n,ae),e.getSideNormals(f,o);const p=t.radius;let m=!1;const v=ao,w=lo,y=ho;let x=null,b=0,E=0,z=0,F=null;for(let B=0,X=f.length;B!==X&&!1===m;B++){const V=no;V.copy(f[B]);const q=V.length();V.normalize();const O=ae.dot(V);if(O<q+p&&O>0){const Z=io,M=oo;Z.copy(f[(B+1)%3]),M.copy(f[(B+2)%3]);const rt=Z.length(),ct=M.length();Z.normalize(),M.normalize();const ht=ae.dot(Z),st=ae.dot(M);if(ht<rt&&ht>-rt&&st<ct&&st>-ct){const ot=Math.abs(O-q-p);if((null===F||ot<F)&&(F=ot,E=ht,z=st,x=q,v.copy(V),w.copy(Z),y.copy(M),b++,u))return!0}}}if(b){m=!0;const B=this.createContactEquation(r,c,t,e,a,h);v.scale(-p,B.ri),B.ni.copy(v),B.ni.negate(B.ni),v.scale(x,v),w.scale(E,w),v.vadd(w,v),y.scale(z,y),v.vadd(y,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(c.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}let P=d.get();const W=co;for(let B=0;2!==B&&!m;B++)for(let X=0;2!==X&&!m;X++)for(let V=0;2!==V&&!m;V++)if(P.set(0,0,0),B?P.vadd(f[0],P):P.vsub(f[0],P),X?P.vadd(f[1],P):P.vsub(f[1],P),V?P.vadd(f[2],P):P.vsub(f[2],P),n.vadd(P,W),W.vsub(s,W),W.lengthSquared()<p*p){if(u)return!0;m=!0;const q=this.createContactEquation(r,c,t,e,a,h);q.ri.copy(W),q.ri.normalize(),q.ni.copy(q.ri),q.ri.scale(p,q.ri),q.rj.copy(P),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(c.position,q.rj),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}d.release(P),P=null;const R=d.get(),L=d.get(),k=d.get(),A=d.get(),I=d.get(),S=f.length;for(let B=0;B!==S&&!m;B++)for(let X=0;X!==S&&!m;X++)if(B%3!=X%3){f[X].cross(f[B],R),R.normalize(),f[B].vadd(f[X],L),k.copy(s),k.vsub(L,k),k.vsub(n,k);const V=k.dot(R);R.scale(V,A);let q=0;for(;q===B%3||q===X%3;)q++;I.copy(s),I.vsub(A,I),I.vsub(L,I),I.vsub(n,I);const O=Math.abs(V),Z=I.length();if(O<f[q].length()&&Z<p){if(u)return!0;m=!0;const M=this.createContactEquation(r,c,t,e,a,h);L.vadd(A,M.rj),M.rj.copy(M.rj),I.negate(M.ni),M.ni.normalize(),M.ri.copy(M.rj),M.ri.vadd(n,M.ri),M.ri.vsub(s,M.ri),M.ri.normalize(),M.ri.scale(p,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.vadd(n,M.rj),M.rj.vsub(c.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}}d.release(R,L,k,A,I)}planeBox(t,e,s,n,i,o,r,c,a,h,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,a,h,u,d,f){const p=zo;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,d,f)){const m=[],v=So;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let w=0;for(let y=0;y!==m.length;y++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,a,h),b=x.ri,E=x.rj;p.negate(x.ni),m[y].normal.negate(v),v.scale(m[y].depth,v),m[y].point.vadd(v,b),E.copy(m[y].point),b.vsub(s,b),E.vsub(n,E),b.vadd(s,b),b.vsub(r.position,b),E.vadd(n,E),E.vsub(c.position,E),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool;s.vsub(n,uo);const f=e.faceNormals,p=e.faces,m=e.vertices,v=t.radius;let w=!1;for(let y=0;y!==m.length;y++){const b=vo;o.vmult(m[y],b),n.vadd(b,b);const E=mo;if(b.vsub(s,E),E.lengthSquared()<v*v){if(u)return!0;w=!0;const z=this.createContactEquation(r,c,t,e,a,h);return z.ri.copy(E),z.ri.normalize(),z.ni.copy(z.ri),z.ri.scale(v,z.ri),b.vsub(n,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(c.position,z.rj),this.result.push(z),void this.createFrictionEquationsFromContact(z,this.frictionResult)}}for(let y=0,x=p.length;y!==x&&!1===w;y++){const E=p[y],z=yo;o.vmult(f[y],z);const F=wo;o.vmult(m[E[0]],F),F.vadd(n,F);const P=xo;z.scale(-v,P),s.vadd(P,P);const W=go;P.vsub(F,W);const R=W.dot(z),L=bo;if(s.vsub(F,L),R<0&&L.dot(z)>0){const k=[];for(let A=0,I=E.length;A!==I;A++){const S=d.get();o.vmult(m[E[A]],S),n.vadd(S,S),k.push(S)}if(so(k,z,s)){if(u)return!0;w=!0;const A=this.createContactEquation(r,c,t,e,a,h);z.scale(-v,A.ri),z.negate(A.ni);const I=d.get();z.scale(-R,I);const S=d.get();z.scale(-v,S),s.vsub(n,A.rj),A.rj.vadd(S,A.rj),A.rj.vadd(I,A.rj),A.rj.vadd(n,A.rj),A.rj.vsub(c.position,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),d.release(I),d.release(S),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult);for(let B=0,X=k.length;B!==X;B++)d.release(k[B]);return}for(let A=0;A!==E.length;A++){const I=d.get(),S=d.get();o.vmult(m[E[(A+1)%E.length]],I),o.vmult(m[E[(A+2)%E.length]],S),n.vadd(I,I),n.vadd(S,S);const B=po;S.vsub(I,B);const X=fo;B.unit(X);const V=d.get(),q=d.get();s.vsub(I,q);const O=q.dot(X);X.scale(O,V),V.vadd(I,V);const Z=d.get();if(V.vsub(s,Z),O>0&&O*O<B.lengthSquared()&&Z.lengthSquared()<v*v){if(u)return!0;const M=this.createContactEquation(r,c,t,e,a,h);V.vsub(n,M.rj),V.vsub(s,M.ni),M.ni.normalize(),M.ni.scale(v,M.ri),M.rj.vadd(n,M.rj),M.rj.vsub(c.position,M.rj),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult);for(let rt=0,ct=k.length;rt!==ct;rt++)d.release(k[rt]);return d.release(I),d.release(S),d.release(V),d.release(Z),void d.release(q)}d.release(I),d.release(S),d.release(V),d.release(Z),d.release(q)}for(let A=0,I=k.length;A!==I;A++)d.release(k[A])}}}planeConvex(t,e,s,n,i,o,r,c,a,h,u){const d=Ao,f=Eo;f.set(0,0,1),i.vmult(f,f);let p=0;const m=Bo;for(let v=0;v!==e.vertices.length;v++)if(d.copy(e.vertices[v]),o.vmult(d,d),n.vadd(d,d),d.vsub(s,m),f.dot(m)<=0){if(u)return!0;const y=this.createContactEquation(r,c,t,e,a,h),x=Co;f.scale(f.dot(m),x),d.vsub(x,x),x.vsub(s,y.ri),y.ni.copy(f),d.vsub(n,y.rj),y.ri.vadd(s,y.ri),y.ri.vsub(r.position,y.ri),y.rj.vadd(n,y.rj),y.rj.vsub(c.position,y.rj),this.result.push(y),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(y,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=t.radius,p=e.elementSize,m=Vo,v=Wo;G.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,y=Math.ceil((v.x+f)/p)+1,x=Math.floor((v.y-f)/p)-1,b=Math.ceil((v.y+f)/p)+1;if(y<0||b<0||w>d.length||x>d[0].length)return;w<0&&(w=0),y<0&&(y=0),x<0&&(x=0),b<0&&(b=0),w>=d.length&&(w=d.length-1),y>=d.length&&(y=d.length-1),b>=d[0].length&&(b=d[0].length-1),x>=d[0].length&&(x=d[0].length-1);const E=[];if(e.getRectMinMax(w,x,y,b,E),v.z-f>E[1]||v.z+f<E[0])return;const P=this.result;for(let W=w;W<y;W++)for(let R=x;R<b;R++){const L=P.length;let k=!1;if(e.getConvexTrianglePillar(W,R,!1),G.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(k=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&k||(e.getConvexTrianglePillar(W,R,!0),G.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(k=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&k))return!0;if(P.length-L>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=qo,v=Lo,w=Ro;G.pointToLocalFrame(n,o,s,w);let y=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,b=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(x<0||E<0||y>d.length||b>d[0].length)return;y<0&&(y=0),x<0&&(x=0),b<0&&(b=0),E<0&&(E=0),y>=d.length&&(y=d.length-1),x>=d.length&&(x=d.length-1),E>=d[0].length&&(E=d[0].length-1),b>=d[0].length&&(b=d[0].length-1);const z=[];if(e.getRectMinMax(y,b,x,E,z),!(w.z-p>z[1]||w.z+p<z[0]))for(let W=y;W<x;W++)for(let R=b;R<E;R++){let L=!1;if(e.getConvexTrianglePillar(W,R,!1),G.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,v,null)),u&&L||(e.getConvexTrianglePillar(W,R,!0),G.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,v,null)),u&&L))return!0}}sphereParticle(t,e,s,n,i,o,r,c,a,h,u){const d=Mo;if(d.set(0,0,1),n.vsub(s,d),d.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,a,h);d.normalize(),p.rj.copy(d),p.rj.scale(t.radius,p.rj),p.ni.copy(d),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,a,h,u){const d=Io;d.set(0,0,1),r.quaternion.vmult(d,d);const f=_o;if(n.vsub(r.position,f),d.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(c,r,e,t,a,h);m.ni.copy(d),m.ni.negate(m.ni),m.ri.set(0,0,0);const v=Fo;d.scale(d.dot(n),v),n.vsub(v,v),m.rj.copy(v),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,a,h,u){let d=-1;const f=To,p=Po;let m=null;const v=No;if(v.copy(n),v.vsub(s,v),i.conjugate(is),is.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,y=t.faces.length;w!==y;w++){const b=t.worldFaceNormals[w];n.vsub(t.worldVertices[t.faces[w][0]],os);const E=-b.dot(os);if(null===m||Math.abs(E)<Math.abs(m)){if(u)return!0;m=E,d=w,f.copy(b)}}if(-1!==d){const w=this.createContactEquation(c,r,e,t,a,h);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const y=w.ri,x=w.rj;y.vadd(n,y),y.vsub(c.position,y),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,a,h,u)}particleCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexParticle(e,t,n,s,o,i,c,r,a,h,u)}sphereTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=ki,f=Hi,p=Di,m=Gi,v=Ui,w=Yi,y=Zi,x=Oi,b=Vi,E=Qi;G.pointToLocalFrame(n,o,s,v);const z=t.radius;y.lowerBound.set(v.x-z,v.y-z,v.z-z),y.upperBound.set(v.x+z,v.y+z,v.z+z),e.getTrianglesInAABB(y,E);const F=ji,P=t.radius*t.radius;for(let A=0;A<E.length;A++)for(let I=0;I<3;I++)if(e.getVertex(e.indices[3*E[A]+I],F),F.vsub(v,b),b.lengthSquared()<=P){if(x.copy(F),G.pointToWorldFrame(n,o,x,F),F.vsub(s,b),u)return!0;let S=this.createContactEquation(r,c,t,e,a,h);S.ni.copy(b),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(F),S.rj.vsub(c.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let A=0;A<E.length;A++)for(let I=0;I<3;I++){e.getVertex(e.indices[3*E[A]+I],d),e.getVertex(e.indices[3*E[A]+(I+1)%3],f),f.vsub(d,p),v.vsub(f,w);const S=w.dot(p);v.vsub(d,w);let B=w.dot(p);if(B>0&&S<0&&(v.vsub(d,w),m.copy(p),m.normalize(),B=w.dot(m),m.scale(B,w),w.vadd(d,w),w.distanceTo(v)<t.radius)){if(u)return!0;const V=this.createContactEquation(r,c,t,e,a,h);w.vsub(v,V.ni),V.ni.normalize(),V.ni.scale(t.radius,V.ri),V.ri.vadd(s,V.ri),V.ri.vsub(r.position,V.ri),G.pointToWorldFrame(n,o,w,w),w.vsub(c.position,V.rj),G.vectorToWorldFrame(o,V.ni,V.ni),G.vectorToWorldFrame(o,V.ri,V.ri),this.result.push(V),this.createFrictionEquationsFromContact(V,this.frictionResult)}}const W=Xi,R=$i,L=Ki,k=Wi;for(let A=0,I=E.length;A!==I;A++){e.getTriangleVertices(E[A],W,R,L),e.getNormal(E[A],k),v.vsub(W,w);let S=w.dot(k);if(k.scale(S,w),v.vsub(w,w),S=w.distanceTo(v),et.pointInTriangle(w,W,R,L)&&S<t.radius){if(u)return!0;let B=this.createContactEquation(r,c,t,e,a,h);w.vsub(v,B.ni),B.ni.normalize(),B.ni.scale(t.radius,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),G.pointToWorldFrame(n,o,w,w),w.vsub(c.position,B.rj),G.vectorToWorldFrame(o,B.ni,B.ni),G.vectorToWorldFrame(o,B.ri,B.ri),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=new l,f=Ri;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const m=new l;m.copy(d),G.pointToWorldFrame(n,o,m,d);const v=qi;if(d.vsub(s,v),f.dot(v)<=0){if(u)return!0;const y=this.createContactEquation(r,c,t,e,a,h);y.ni.copy(f);const x=Li;f.scale(v.dot(f),x),d.vsub(x,x),y.ri.copy(x),y.ri.vsub(r.position,y.ri),y.rj.copy(d),y.rj.vsub(c.position,y.rj),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}}}const Mt=new l,Pt=new l,Rt=new l,Mi=new l,Ni=new l,Ti=new $,Pi=new $,Ri=new l,qi=new l,Li=new l,Wi=new l,Vi=new l;new l;const ji=new l,Oi=new l,ki=new l,Hi=new l,Di=new l,Gi=new l,Ui=new l,Yi=new l,Xi=new l,$i=new l,Ki=new l,Zi=new j,Qi=[],ce=new l,ns=new l,Ji=new l,to=new l,eo=new l;function so(g,t,e){let s=null;const n=g.length;for(let i=0;i!==n;i++){const o=g[i],r=Ji;g[(i+1)%n].vsub(o,r);const c=to;r.cross(t,c);const a=eo;e.vsub(o,a);const h=c.dot(a);if(!(null===s||h>0&&!0===s||h<=0&&!1===s))return!1;null===s&&(s=h>0)}return!0}const ae=new l,no=new l,io=new l,oo=new l,ro=[new l,new l,new l,new l,new l,new l],co=new l,ao=new l,lo=new l,ho=new l,uo=new l,po=new l,fo=new l,mo=new l,vo=new l,yo=new l,wo=new l,xo=new l,go=new l,bo=new l;new l,new l;const Ao=new l,Eo=new l,Bo=new l,Co=new l,zo=new l,So=new l,Io=new l,_o=new l,Fo=new l,Mo=new l,is=new $,No=new l;new l;const To=new l,os=new l,Po=new l,Ro=new l,qo=new l,Lo=[0],Wo=new l,Vo=new l;class rs{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let a=!1;const h=s[c];for(;h>n[r];)r++;a=h===n[r],a||cs(t,h)}r=0;for(let c=0;c<o;c++){let a=!1;const h=n[c];for(;h>s[r];)r++;a=s[r]===h,a||cs(e,h)}}}function cs(g,t){g.push((4294901760&t)>>16,65535&t)}const Ee=(g,t)=>g<t?`${g}-${t}`:`${t}-${g}`;class jo{constructor(){this.data={keys:[]}}get(t,e){const s=Ee(t,e);return this.data[s]}set(t,e,s){const n=Ee(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Ee(t,e),n=this.data.keys.indexOf(s);-1!==n&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;)delete t[e.pop()]}}class Oo extends ut{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new l,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new Bs,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new yi,this.constraints=[],this.narrowphase=new Fi(this),this.collisionMatrix=new Nt,this.collisionMatrixPrevious=new Nt,this.bodyOverlapKeeper=new rs,this.shapeOverlapKeeper=new rs,this.contactmaterials=[],this.contactMaterialTable=new jo,this.defaultMaterial=new He("default"),this.defaultContactMaterial=new ke(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Ut?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return void 0===s&&(s={}),s.mode=et.ALL,s.from=t,s.to=e,s.callback=n,Be.intersectWorld(this,s)}raycastAny(t,e,s,n){return void 0===s&&(s={}),s.mode=et.ANY,s.from=t,s.to=e,s.result=n,Be.intersectWorld(this,s)}raycastClosest(t,e,s,n){return void 0===s&&(s={}),s.mode=et.CLOSEST,s.from=t,s.to=e,s.result=n,Be.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof C&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(-1!==n){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const s=it.now()/1e3;this.step(t,this.lastCallTime?s-this.lastCallTime:void 0,e),this.lastCallTime=s}step(t,e,s){if(void 0===s&&(s=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=it.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(it.now()-n>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Uo,n=Yo,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,a=this.doProfiling,h=this.profile,u=C.DYNAMIC;let d=-1/0;const f=this.constraints,p=Go;c.length();const m=c.x,v=c.y,w=c.z;let y=0;for(a&&(d=it.now()),y=0;y!==i;y++){const A=o[y];if(A.type===u){const I=A.force,S=A.mass;I.x+=S*m,I.y+=S*v,I.z+=S*w}}for(let A=0,I=this.subsystems.length;A!==I;A++)this.subsystems[A].update();a&&(d=it.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(h.broadphase=it.now()-d);let x=f.length;for(y=0;y!==x;y++){const A=f[y];if(!A.collideConnected)for(let I=s.length-1;I>=0;I-=1)(A.bodyA===s[I]&&A.bodyB===n[I]||A.bodyB===s[I]&&A.bodyA===n[I])&&(s.splice(I,1),n.splice(I,1))}this.collisionMatrixTick(),a&&(d=it.now());const b=Do,E=e.length;for(y=0;y!==E;y++)b.push(e[y]);e.length=0;const z=this.frictionEquations.length;for(y=0;y!==z;y++)p.push(this.frictionEquations[y]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,b,this.frictionEquations,p),a&&(h.narrowphase=it.now()-d),a&&(d=it.now()),y=0;y<this.frictionEquations.length;y++)r.addEquation(this.frictionEquations[y]);const F=e.length;for(let A=0;A!==F;A++){const I=e[A],S=I.bi,B=I.bj,X=I.si,V=I.sj;let q;q=S.material&&B.material&&this.getContactMaterial(S.material,B.material)||this.defaultContactMaterial,S.material&&B.material&&S.material.restitution>=0&&B.material.restitution>=0&&(I.restitution=S.material.restitution*B.material.restitution),r.addEquation(I),S.allowSleep&&S.type===C.DYNAMIC&&S.sleepState===C.SLEEPING&&B.sleepState===C.AWAKE&&B.type!==C.STATIC&&B.velocity.lengthSquared()+B.angularVelocity.lengthSquared()>=2*B.sleepSpeedLimit**2&&(S.wakeUpAfterNarrowphase=!0),B.allowSleep&&B.type===C.DYNAMIC&&B.sleepState===C.SLEEPING&&S.sleepState===C.AWAKE&&S.type!==C.STATIC&&S.velocity.lengthSquared()+S.angularVelocity.lengthSquared()>=2*S.sleepSpeedLimit**2&&(B.wakeUpAfterNarrowphase=!0),this.collisionMatrix.set(S,B,!0),this.collisionMatrixPrevious.get(S,B)||(Kt.body=B,Kt.contact=I,S.dispatchEvent(Kt),Kt.body=S,B.dispatchEvent(Kt)),this.bodyOverlapKeeper.set(S.id,B.id),this.shapeOverlapKeeper.set(X.id,V.id)}for(this.emitContactEvents(),a&&(h.makeContactConstraints=it.now()-d,d=it.now()),y=0;y!==i;y++){const A=o[y];A.wakeUpAfterNarrowphase&&(A.wakeUp(),A.wakeUpAfterNarrowphase=!1)}for(x=f.length,y=0;y!==x;y++){const A=f[y];A.update();for(let I=0,S=A.equations.length;I!==S;I++)r.addEquation(A.equations[I])}r.solve(t,this),a&&(h.solve=it.now()-d),r.removeAllEquations();const P=Math.pow;for(y=0;y!==i;y++){const A=o[y];if(A.type&u){const I=P(1-A.linearDamping,t),S=A.velocity;S.scale(I,S);const B=A.angularVelocity;if(B){const X=P(1-A.angularDamping,t);B.scale(X,B)}}}this.dispatchEvent(Ho),a&&(d=it.now());const R=this.stepnumber%(this.quatNormalizeSkip+1)==0,L=this.quatNormalizeFast;for(y=0;y!==i;y++)o[y].integrate(t,R,L);this.clearForces(),this.broadphase.dirty=!0,a&&(h.integrate=it.now()-d),this.stepnumber+=1,this.dispatchEvent(ko);let k=!0;if(this.allowSleep)for(k=!1,y=0;y!==i;y++){const A=o[y];A.sleepTick(this.time),A.sleepState!==C.SLEEPING&&(k=!0)}this.hasActiveBodies=k}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(xt,gt),t){for(let i=0,o=xt.length;i<o;i+=2)Zt.bodyA=this.getBodyById(xt[i]),Zt.bodyB=this.getBodyById(xt[i+1]),this.dispatchEvent(Zt);Zt.bodyA=Zt.bodyB=null}if(e){for(let i=0,o=gt.length;i<o;i+=2)Qt.bodyA=this.getBodyById(gt[i]),Qt.bodyB=this.getBodyById(gt[i+1]),this.dispatchEvent(Qt);Qt.bodyA=Qt.bodyB=null}xt.length=gt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(xt,gt),s){for(let i=0,o=xt.length;i<o;i+=2){const r=this.getShapeById(xt[i]),c=this.getShapeById(xt[i+1]);bt.shapeA=r,bt.shapeB=c,r&&(bt.bodyA=r.body),c&&(bt.bodyB=c.body),this.dispatchEvent(bt)}bt.bodyA=bt.bodyB=bt.shapeA=bt.shapeB=null}if(n){for(let i=0,o=gt.length;i<o;i+=2){const r=this.getShapeById(gt[i]),c=this.getShapeById(gt[i+1]);At.shapeA=r,At.shapeB=c,r&&(At.bodyA=r.body),c&&(At.bodyB=c.body),this.dispatchEvent(At)}At.bodyA=At.bodyB=At.shapeA=At.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force.set(0,0,0),n.torque.set(0,0,0)}}}new j;const Be=new et,it=globalThis.performance||{};if(!it.now){let g=Date.now();it.timing&&it.timing.navigationStart&&(g=it.timing.navigationStart),it.now=()=>Date.now()-g}new l;const ko={type:"postStep"},Ho={type:"preStep"},Kt={type:C.COLLIDE_EVENT_NAME,body:null,contact:null},Do=[],Go=[],Uo=[],Yo=[],xt=[],gt=[],Zt={type:"beginContact",bodyA:null,bodyB:null},Qt={type:"endContact",bodyA:null,bodyB:null},bt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},At={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}}}]);